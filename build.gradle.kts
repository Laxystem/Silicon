// This is to suppress false warnings generated by a bug in IntelliJ
@file:Suppress("DSL_SCOPE_VIOLATION", "MISSING_DEPENDENCY_CLASS", "FUNCTION_CALL_EXPECTED", "PropertyName")

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	java
	`maven-publish`

	alias(libs.plugins.kotlin)
	alias(libs.plugins.quilt.loom)
}

val archives_base_name: String by project
base.archivesName.set(archives_base_name)

val javaVersion = 17
val charset = "UTF-8"

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

val silicon: SourceSet by sourceSets.main

tasks.withType<KotlinCompile>()
	.getByName(silicon.getCompileTaskName("kotlin"))
	.compilerOptions
	.freeCompilerArgs
	.add("-Xexplicit-api=strict")

val silica: SourceSet by sourceSets.creating {
	compileClasspath += silicon.compileClasspath
	runtimeClasspath += silicon.runtimeClasspath
}

fun DependencyHandlerScope.includeApi(dependency: Any) {
	include(dependency)
	api(dependency)
}

dependencies {
	minecraft(libs.minecraft)
	mappings(
		variantOf(libs.quilt.mappings) {
			classifier("intermediary-v2")
		}
	)

	modImplementation(libs.quilt.loader)
	modImplementation(libs.quilt.standard)
	// modImplementation(libs.quilt.deprecated)
	modImplementation(libs.quilt.kotlin)

	includeApi(libs.logging)
	includeApi(libs.collections.immutable)

	"${silica.name}Implementation"(silicon.output)
}

tasks {
	withType<KotlinCompile> {
		kotlinOptions {
			jvmTarget = javaVersion.toString()
			// languageVersion: A.B of the kotlin plugin version A.B.C
			languageVersion = libs.plugins.kotlin.get().version.requiredVersion.substringBeforeLast('.')
		}
	}

	withType<JavaCompile>.configureEach {
		options.encoding = charset
		options.isDeprecation = true
		options.release.set(javaVersion)
	}

	sequenceOf(silica, silicon)
		.map { getByName(it.processResourcesTaskName) }
		.filterIsInstance<ProcessResources>()
		.forEach {
			it.filteringCharset = charset
			it.inputs.property("version", project.version)

			it.filesMatching("quilt.mod.json") {
				expand(
					mapOf(
						"version" to project.version
					)
				)
			}
		}

	processResources {
		filteringCharset = charset
		inputs.property("version", project.version)

		filesMatching("quilt.mod.json") {
			expand(
				mapOf(
					"version" to project.version
				)
			)
		}
	}

	javadoc {
		options.encoding = charset
	}

	// ./gradlew wrapper --gradle-version
	wrapper {
		distributionType = Wrapper.DistributionType.BIN
	}

	jar {
		from("LICENSE.md") {
			rename { "LICENSE_${archives_base_name}.md" }
		}
	}
}

val targetJavaVersion: JavaVersion = JavaVersion.toVersion(javaVersion)
if (JavaVersion.current() < targetJavaVersion) {
	kotlin.jvmToolchain(javaVersion)

	java.toolchain {
		languageVersion.set(JavaLanguageVersion.of(javaVersion))
	}
}

java {
	withSourcesJar()
	withJavadocJar()

	sourceCompatibility = targetJavaVersion
	targetCompatibility = targetJavaVersion
}

// Configure the maven publication
publishing {
	publications {
		register<MavenPublication>("Maven") {
			from(components.getByName("java"))
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories { }
}

